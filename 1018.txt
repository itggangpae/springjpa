**Spring JPA
1.ORM(Object Relational Mapping)
=>객체 지향 패러다임을 관계형 데이터베이스에 적용하기 위한 기술
=>객체 와 관계형 데이터베이스의 테이블을 매핑 시켜서 사용하는 기술
=>VO 형태 의 클래스 와 관계형 데이터베이스의 클래스는 만드는 방법이 유사하다는 데에서 착안
=>클래스 와 테이블이 완전히 동일하지는 않기 때문에 이를 해결하기 위해서 ORM이 등장

1)장점
=>특정 데이터베이스 종속되지 않음
=>객체 지향적 프로그래밍
=>생산성 향상

2)단점
=>복잡한 쿼리를 처리하는 것이 어렵습니다.
=>학습 시간이 깁니다.
=>성능 저하의 위험

2.JPA(Java Persistence API)
=>Java ORM 기술에 대한 표준 인터페이스
=>구현체로는 Hibernate, EclipseLink, OpenJpa 등이 있는데 Hibernate가 가장 많이 사용됨


Spring Data JPA <-> Hibernate <-> JDBC <-> Database

1)구성 요소
=>Entity
	테이블에 대응되는 클래스
	클래스 위에 @Entity를 붙여서 생성

=>Entity Manager
	Entity 에 대한 데이터베이스 작업을 제공

=>Entity Manager Factory
	Entity Manager 를 생성해주는 클래스

=>Persistence Context
	실제 데이터베이스에 적용하는 클래스

2)Persistence Context
=>데이터베이스 와 애플리케이션 사이에 중간 계층
=>버퍼링 이나 캐싱등을 활용하기 위해서 존재
=>쓰기 지연을 구현

3.JPA를 지원하는 프로젝트를 생성하고 테스트 코드를 작성하고 실행
1)프로젝트 생성
의존성 설정: spring dev tools, lombok, spring web, spring data jpa, 사용하고자 하는 데이터베이스

2)application.properties 파일에 데이터베이스 접속 정보 설정
=>JPA를 사용하는 프로젝트를 시작할 때 데이터베이스에 접속을 시도하기 때문에 실행을 위해서는 반드시 데이터베이스 접속 정보를 먼저 설정해야 합니다.

#데이터베이스 접속 정보
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/adam?serverTimezone=UTC
spring.datasource.username=root
spring.datasource.password=wnddkd

=>실행을 하면 DataSource 생성 부분 과 Hibernate 연동 한다는 로그가 출력됩니다.

4.Entity Class
=>데이터베이스 테이블 과 매핑이 되는 클래스
1)관련 Annotation
=>@Entity: Entity 클래스로 선언
=>@Table: 데이터베이스에 연결되는 테이블 이름으로 생략하면 클래스 이름으로 테이블을 설정
MySQL 같은 경우는 테이블 이름 중간에 대문자가 들어가면 _를 추가하고 소문자로 변경합니다.
=>@Id: 테이블의 기본키로 사용할 속성을 지정
=>@GeneratedValue: 키 값을 생성하는 전략 명시
=>@Column: 속성 과 컬럼을 매핑하는데 생략하면 속성 이름과 일치하는 컬럼 과 매핑
=>@Lob: BLOB 나 CLOB 타입
=>@CreationTimestamp: 삽입 할 때 시간 자동 저장
=>@UpdateTimestamp: 수정 할 때 시간 자동 저장
=>@Enumerated: enum 타입
=>@Transient: 데이터베이스 매핑 하지 않는 속성
=>@Temporal: 날짜 타입
=>@CreateDate: Entity 가 생성되어 저장될 때 시간 자동 저장
=>@LastModifiedDate: Entity 가 수정되어 저장될 때 시간 자동 저장


2)GeneratedValue
=>키 생성 전략
AUTO: Hibernate 가 생성 방식을 결정

IDENTITY: MySQL 이나 Maria DB의 경우는 auto_increament 방식을 이용

SEQUENCE: 오라클의 Sequence 이용

TABLE: 키 생성 전용 Table 을 생성해서 키를 생성하는데 @TableGenerator 와 같이 사용, 모든 관계형 데이터베이스에서 동일한 방식으로 키를 생성하고자 할 때 이용

3)Column
=>name: 연결할 컬럼 이름, 생략하면 속성 이름 과 동일한 컬럼 과 매핑
=>unique
=>insertable: 삽입 가능 여부
=>updateable: 수정 가능 여부
=>length: 길이
=>nullable: null 가능 여부
=>columnDefinition: 자료형 과 제약조건을 문자열로 직접 설정
=>precision: 소수를 포함하는 전체 자릿수로 BigDecimal에서 이용
=>scale: 소수 자릿수로 BigDecimal에서 이용

4)Entity 클래스 생성 - entity.Memo
@Entity
@Table(name="tbl_memo")

@ToString
@Getter
@Setter
@Builder
@AllArgsConstructor
@NoArgsConstructor
public class Memo {
	//기본키 설정 - Hibernate 가 알아서 결정
	@Id
	@GeneratedValue(
			strategy=GenerationType.AUTO)
	private Long mno;
	@Column(length=200, nullable=false)
	private String memoText;
}

5)application.properties 파일에 설정 추가
#ddl 구문 수행 옵션 설정
spring.jpa.hibernate.ddl-auto=update

spring.jpa.properties.hibernate.show_sql=true
spring.jpa.properties.hibernate.format_sql=true
logging.level.org.hibernate.type.descriptor.sql=trace
spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect

6)추가한 설정 내용
=>spring.jpa.hibernate.ddl-auto : DDL 문장을 어떻게 할 것인지 옵션을 설정
none: 아무것도 수행하지 않음 - 대부분의 데이터베이스에서 기본값

create: SessionFactory 가 시작될 때 기존 테이블을 drop 하고 create

create-drop: SessionFactory 가 시작될 때  create 하고 SessionFactory가 종료될 때 drop

update: SessionFactory 가 시작될 때 변경된 내용을 확인해서 적용

validate: SessionFactory 가 시작될 때 변경된 내용을 확인해서 Entity 와 테이블이 정보가 일치하지 않으면 에러를 발생
 
=>spring.jpa.properties.hibernate.show_sql=true: 콘솔에 SQL 출력 여부

=>spring.jpa.properties.hibernate.format_sql=true: SQL을 정리해서 출력

=>logging.level.org.hibernate.type.descriptor.sql=trace: 바인딩 하는 데이터를 출력

5.JpaResository 인터페이스
=>데이터베이스 작업을 위한 인터페이스
1)데이터베이스 작업을 위한 방법
=>제공되는 메서드 이용: 구현할 필요없음
=>메서드 이름을 생성: JPA에서 제공되는 규칙에 따라 메서드를 선언하면 JPA가 구현해 줍니다.
=>JPA Query 이용
    JPA 가 제공하는 Query 이용할 수 있음
    SQL을 작성해서 사용할 수 있음
    Querydsl을 작성해서 사용할 수 있음

2)인터페이스 생성 방법
JpaRepository<Entity Class 이름, 기본키의 자료형> 을 extends 하는 인터페이스를 생성

3)제공되는 메서드
=>Entity save(Entity 객체): insert 나 update 수행
매개변수로 대입한 데이터의 기본키 값이 존재하면 Update 그렇지 않으면 Insert

=>Entity findById(ID 값): ID에 해당하는 데이터를 찾아서 리턴하는데 존재하지 않으면 null을 리턴

=>List<Entity> findAll(): 테이블의 모든 데이터를 List로 리턴하는데 존재하지 않으면 List의 size가 0

=>deleteById(ID 값) 또는 delete(Entity 객체): 삭제

=>count(): 테이블의 데이터 개수 리턴


4)Memo 엔티티에 기본 작업을 수행하기 위한 Repository 인터페이스 생성 - persistence.MemoRepository

public interface MemoRepository 
	extends JpaRepository<Memo, Long>{

}


5)기본 작업 테스트
=>src/test/java 디렉토리에 Test 클래스를 생성하고 주입 받는지 테스트
@SpringBootTest
public class RepositoryTest {
	//Repository 주입
	@Autowired
	MemoRepository memoRepository;
	
	//주입 테스트
	@Test
	public void DITest(){
		System.out.println(memoRepository);
	}

}

=>삽입하는 메서드를 추가하고 삽입을 테스트
@Test
public void insert(){
	//데이터 100개 삽입
	IntStream.rangeClosed(1,  100)
		.forEach(i -> {
			Memo memo = 
				Memo.builder()
				.memoText("Sample..." + i)
				.build();
			memoRepository.save(memo);
		});
}

=>수정하는 메서드를 추가하고 삽입을 테스트
@Test
public void insert(){
	//데이터 100개 삽입
	IntStream.rangeClosed(1,  100)
		.forEach(i -> {
			Memo memo = 
				Memo.builder()
				.memoText("Sample..." + i)
				.build();
			memoRepository.save(memo);
		});
}

=>테이블의 전체 데이터 조회하는 메서드를 생성하고 테스트
@Test
public void getList() {
	List<Memo> list = memoRepository.findAll();
	list.stream().forEach(memo -> {
		System.out.println(memo);
	});	
}

=>기본키를 이용해서 하나의 데이터를 조회하는 메서드를 생성하고 테스
@Test
public void getMemo() {
	Optional <Memo> result = memoRepository.findById(101L);
	if(result.isPresent()) {
		System.out.println(result.get());
	}else {
		System.out.println("데이터 없음");
	}
}

=>데이터를 삭제하는 메서드를 생성하고 테스트
@Test
public void deleteMemo() {
	memoRepository.deleteById(100L);
	memoRepository.delete(Memo.builder().mno(99L).build());
}

6)페이징 / 정렬
=>페이지 단위 또는 TOP N을 구현하기 위해서는 데이터베이스 마다 다른 SQL을 이용
=>Spring JPA에서는 Dialect 를 설정하면 findAll 메서드에 Pageable 이라는 객체를 생성해서 대입하면 연동하는 데이터베이스에 맞게 SQL을 생성해서 수행
이 경우 리턴되는 데이터 타입은 Page<Entity> 타입입니다.
=>Pageable 객체는 PageRequest 클래스의 of 메서드를 이용해서 생성
생성할 때 page번호, 데이터개수, Sort 객체를 대입해서 생성
=>Sort 객체는 생략이 가능하고 생성을 할 때는 Sort.by("컬럼이름").ascending() 나 descending() 을 호출
여러 개의 조건을 정렬 기준으로 사용할 때는 여러 개의 Sort 객체를 생성한 후 sort객체.and(sort객체)

7)페이징 과 정렬을 위한 메서드를 테스트 클래스에 생성한 후 테스트
	//페이지 단위로 가져오기
	//@Test
	public void paging() {
		//0번 페이지 10개의 데이터 조회
		Pageable page = 
			PageRequest.of(0,  10);
		Page<Memo> result = 
				memoRepository.findAll(page);
		
		result.get().forEach(memo -> {
			System.out.println(memo);
		});
	}
	
	//정렬 수행
	@Test
	public void sorting() {
		//0번 페이지 10개의 데이터 조회
		Sort sort = Sort.by("mno").descending();
		Pageable page = 
			PageRequest.of(0,  10, sort);
		Page<Memo> result = 
				memoRepository.findAll(page);
		
		result.get().forEach(memo -> {
			System.out.println(memo);
		});
	}

7)Query Methods
=>메서드의 이름 자체가 query 인 메서드
=>규칙은 https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#jpa.query-methods

=>이름 만드는 규칙
작업이름 + (Entity 이름) + by + 속성이름
Entity 이름은 생략하면 Repsitory를 만들 때 지정한 Entity 이름이 자동으로 설정
=>여러가지 키워드를 조합해서 생성하는 것이 가능
=>select 구문의 경우 return type 이 List 타입이나 배열인데 Pageable 객체를 대입하면 Page<Entity>
select 이외의 구문(delete)은 리턴 타입이 void

Memo 테이블에서 memoText를 가지고 조회하는 메서드
public List<Memo> findByMemoText(String memoText);


=>MemoRepository 인터페이스에 메서드를 선언
//mno 2개를 입력받아서 2개 사이에 있는 데이터를 조회
public List<Memo> findByMnoBetween(Long from, Long to);

public Page<Memo> findByMnoBetween(Long from, Long to, Pageable page);
	
public List<Memo> findByMnoBetweenOrderByMnoDesc(Long from, Long to);
	
//삭제하는 메서드
public void deleteByMnoBetween(Long from, Long to);
	
	
public void deleteByMnoLessThan(Long from);

=>Test 클래스에서 테스트
	//@Test
	public void naming1() {
		List<Memo> list = 
			memoRepository.findByMnoBetween(
				10L, 30L);
		list.stream().forEach(memo -> {
			System.out.println(memo);
		});
	}
	
	//@Test
	public void naming2() {
		Pageable page = PageRequest.of(1,  5);
		Page<Memo> list = 
			memoRepository.findByMnoBetween(
				10L, 30L, page);
		list.get().forEach(memo -> {
			System.out.println(memo);
		});
	}
	
	//@Test
	public void naming3() {
		List<Memo> list = 
			memoRepository.
				findByMnoBetweenOrderByMnoDesc(
				10L, 30L);
		list.stream().forEach(memo -> {
			System.out.println(memo);
		});
	}



	@Test
	@Commit
	@Transactional
	//삽입 이나 삭제 및 수정하는 메서드를 호출할 때는
	//Transaction을 적용해주는 것이 좋습니다.
	//삭제의 경우는 필수로 지정해야 하는 경우가 많음
	//트랜잭션은 Service 계층에서 적용합니다.
	public void naming4() {
		memoRepository.
		deleteByMnoLessThan(10L);
	}

8)@Query
=>메서드 이름 과 상관없이 JPQL 이나 Native SQL을 수행할 수 있도록 해주는 어노테이션
=>JPQL은 ORM에서 제공하는 query 인데 SQL 과 유사하지만 동일하지는 않음
=>파라미터 바인딩이 가능
?1, ?2 이런 식으로 순서를 설정해서 바인딩 가능
@Param 의 형태로 이름을 이용해서 바인딩 가능
#{ } 의 형태로 바인딩 가능
=>Page 단위로 데이터를 가져올 수 있는데 이 경우 데이터 개수를 세는 countQuery 속성이 반드시 설정되어야 합니다.
=>nativeQuery 속성을 true로 설정하면 SQL을 사용하는 것도 가능
=>메서드 이름은 원하는 이름을 사용하는 것이 가능하고 삽입, 삭제, 수정을 할 때는 트랜잭션을 적용해야 하고 @Modifying 과 같이 사용해야 함

9)@Query를 이용해서 수정하는 메서드를 만들고 테스트
=>MemoRepository 인터페이스에 메서드를 선언
//데이터를 수정하는 메서드
	//Memo는 테이블 이름이 아니고 Entity 이름입니다.
	//속성도 Entity에서 속성 이름을 사용해야 합니다.
	@Transactional
	@Modifying
	@Query("update Memo m "
			+ "set m.memoText = :memoText "
			+ "where m.mno = :mno")
	public int updateMemoText(
			@Param("mno") Long mno,
			@Param("memoText") String memoText);
	
	@Transactional
	@Modifying
	@Query("update Memo m "
			+ "set m.memoText = :#{#param.memoText} "
			+ "where m.mno = :#{#param.mno}")
	public int updateMemoText(
			@Param("param") Memo memo);


=>Test 클래스에서 테스트
	//@Test
	public void queryMethod1() {
		Long mno = 10L;
		String memoText = "데이터 수정";
		memoRepository.updateMemoText(
				mno, memoText);
	}
	
	//@Test
	public void queryMethod2() {
		Memo memo = Memo.builder()
				.mno(11L)
				.memoText("데이터를 수정")
				.build();
		memoRepository.updateMemoText(
				memo);
	}


10)@Query를 이용한 Paging 처리
=>MemoRepsository 인터페이스에 페이징 처리를 위한 메서드를 선언
	//페이지 단위로 조회
	//countQuery 가 없어도 조회는 가능하지만
	//나중에 페이지 개수를 알 수 없음
	@Query(value="select m "
			+ "from Memo m "
			+ "where m.mno > :mno",
			countQuery = "select count(m) "
					+ "from Memo m "
					+ "where m.mno > :mno")
	Page<Memo> getListWithQuery(
			@Param("mno") Long mno,
			Pageable pageable);


=>Test 클래스에서 테스트 메서드를 작성하고 확인
	@Test
	public void testSelectQuery() {
		Pageable pageable = 
			PageRequest.of(0,  10, 
				Sort.by("mno").descending());
		Page <Memo> page = 
			memoRepository.getListWithQuery(
				50L, pageable);
		page.get().forEach(memo -> {
			System.out.println(memo);
		});

	}

10)Object 타입으로 리턴받기
=>join을 수행한다면 하나의 Entity 타입으로 리턴받기가 어려움
=>Entity를 사용하기 애매한 경우에는 리턴을 받을 때 Page<Object []>을 이용해서 리턴받을 수 있음
=>가장 좋은 경우는 2개 테이블의 모든 데이터를 사용할 수 있는 Entity Type을 만드는 것입니다.
=>MemoRepository 클래스에 메서드를 선언
@Query(value="select m.mno, m.memoText, CURRENT_DATE "
			+ "from Memo m "
			+ "where m.mno > :mno",
			countQuery = "select count(m) "
					+ "from Memo m "
					+ "where m.mno > :mno")
Page<Object[]> getListWithQueryObject(
			@Param("mno") Long mno,
			Pageable pageable);

=>Test 클래스에서 테스트 메서드를 작성하고 확인
	@Test
	public void testSelectQueryObject() {
		Pageable pageable = 
			PageRequest.of(0,  10, 
				Sort.by("mno").descending());
		Page <Object[]> page = 
			memoRepository.getListWithQueryObject(
				50L, pageable);
		for(Object [] ar : page) {
			//System.out.println(Arrays.toString(ar));
			//mno 만 추출해서 사용
			Long mno = (Long)ar[0];
			System.out.println(mno);
		}

	}

11)Native SQL 사용
=>SQL을 이용해서 데이터베이스 작업 가능
=>SQL 구문을 작성하고 nativeQuery 라는 속성을 true로 설정해야 합니다.
=>MemoRepository 인터페이스에 메서드를 선언
@Query(value="select * "
	+ "from tbl_memo "
	+ "where mno > 0",
	nativeQuery=true)
List<Object []> getNativeSQL();
=>Test 클래스에 메서드를 만들어서 확인
@Test
public void nativeSQL() {
	List<Object []> list = 
		memoRepository.getNativeSQL();
	list.stream().forEach(ar -> {
		System.out.println(Arrays.toString(ar));
	});
}

3.Service 계층 테스트
1)Controller 와 Service 계층에서 사용할 DTO 클래스를 생성 - domain.MemoDTO
@Builder
//매개변수가 없는 생성자 - Default Constructor
@NoArgsConstructor
@AllArgsConstructor
@Data
public class MemoDTO {
	private Long mno;
	private String memoText;
}

2)클라이언트 요청을 처리할 메서드의 원형을 가진 Service 인터페이스를 생성
- service.MemoService
public interface MemoService {
	//데이터 삽입하는 메서드
	//JPA에서는 삽입이나 수정 작업 후에
	//삽입 이나 수정한 Entity 가 리턴됩니다.
	public MemoDTO insertMemo(MemoDTO memoDTO);
}

3)클라이언트 요청을 처리할 메서드의 구현 내용을 가진 ServiceImpl 클래스를 생성 - service.MemoServiceImpl

@Service
//final 속성을 주입받는 생성자 - @Autowired가 필요없음
@RequiredArgsConstructor
public class MemoServiceImpl implements MemoService {
	//@Autowired
	private final MemoRepository memoRepository;
	
	@Override
	public MemoDTO insertMemo(MemoDTO memoDTO) {
		//MemoDTO 를 가지고 데이터베이스 작업에 사용할 Entity로 변환
		Memo memo = Memo.builder()
				.memoText(memoDTO.getMemoText())
				.build();
		//데이터베이스 작업 수행
		Memo m = memoRepository.save(memo);
		
		//Entity를 Controller에게 전송하기 위해서
		//DTO로 변환
		MemoDTO result = MemoDTO.builder()
				.mno(m.getMno())
				.memoText(m.getMemoText())
				.build();
		
		return result;
	}

}

4)src/test/java 디렉토리에 Service 계층을 테스트 할 클래스를 생성하고 테스트
@SpringBootTest
public class ServiceTest {
	@Autowired
	MemoService memoService;
	
	@Test
	public void testInsert() {
		MemoDTO dto = MemoDTO.builder()
				.memoText("서비스 테스트")
				.build();
		MemoDTO result = 
				memoService.insertMemo(dto);
		System.out.println(result);
	}

}

4.Controller 계층 테스트
=>Controller 계층은 자바 코드로 테스트 가능하고 Postman 과 같은 프로그램을 이용해서 테스트 가능

1)클라이언트의 요청 URL에 따라 필요한 Service 를 호출하는 Controller 클래스를 생성 - controller.MemoController

@RestController
@RequiredArgsConstructor
public class MemoController {
	private final MemoService memoService;

	//데이터 삽입 요청
	@PostMapping("/insert")
	public ResponseEntity<MemoDTO>
		insertMemo(
			@RequestBody MemoDTO memoDTO){
		MemoDTO result = 
			memoService.insertMemo(memoDTO);
		return ResponseEntity
				.status(HttpStatus.OK)
				.body(result);
	}
}

2)서버를 실행하고 Postman 같은 프로그램을 이용해서 테스트

3)Test 코드를 이용해서 Controller 테스트
=>데이터를 json 문자열로 만들어주는 gson 이라는 라이브러리의 의존성을 pom.xml 파일의 dependencise에 추가

<dependency>
	<groupId>com.google.code.gson</groupId>
	<artifactId>gson</artifactId>
</dependency>



=>Test를 위한 클래스를 만들고 테스트를 수행
@WebMvcTest(MemoController.class)
public class ControllerTest {
	@Autowired
	private MockMvc mockMvc;

	//테스트에 필요한 인스턴스 생성
	@MockBean
	MemoService memoService;
	
	@Test
	public void insertTest() {
		MemoDTO memoDTO = 
				MemoDTO.builder()
				.memoText("코드로 Controller 테스트")
				.build();
		//DTO를 JSON 문자열로 변환
		Gson gson = new Gson();
		String param = gson.toJson(memoDTO);
		
		try {
		mockMvc.perform(
				post("/insert")
				.content(param)
				.contentType(
					MediaType.APPLICATION_JSON))
		.andExpect(status().isOk())
		.andDo(print());
		}catch(Exception e) {}
		
	}
}

=>코드로 테스트를 해보면 실제 데이터를 삽입하지는 않음

**Spring Boot 에서 View 사용
1.Spring Boot에서 View를 생성하는 방법
1)JSP - EL 과 JSTL을 이용해서 서버에서 생성한 데이터를 출력
2)Template Engine - 서버에서 생성한 데이터를 출력하기 위한 라이브러리
=>Thymeleaf
=>Velocity
=>FreeMaker
=>Mustache
=>Groovy
3)최근에는 REST API Server만 구축하고 react 나 vue, angular 등을 이용해서 출력

2.View 실습을 위한 프로젝트를 생성
=>start.spring.io에 접속해서 생성
빌드 도구는 gradle
java 버전은 11
의존성은 Spring Boot DevTools, Lombok, Spring Web, Thymeleaf

3.JSP 사용
1)의존성 설정 - jstl, tomcat-embed-jasper

=>build.gradle 파일의 dependencies 안에 작성한 후 Load를 다시 수행
implementation 'javax.servlet:jstl'
implementation 'org.apache.tomcat.embed:tomcat-embed-jasper'
	
2)application.properties 파일에 jsp 디렉토리 위치 설정
spring.mvc.view.prefix=/WEB-INF/views/
spring.mvc.view.suffix=.jsp

spring.thymeleaf.prefix=classpath:/templates/
spring.thymeleaf.suffix=.html
spring.thymeleaf.cache=false
spring.thymeleaf.view-names=thymeleaf/*

3)클라이언트의 요청 URL 과 대응하는 비지니스 로직을 호출하는 Controller를 생성 - controller.PageController

@Controller
public class PageController {
    @GetMapping("/")
    public String main(Model model){
        Map<String, Object> map = 
                new HashMap<>();
        map.put("Language", "Java");
        map.put("IDE", "IntelliJ");
        map.put("Build Tool", "Gradle");
        map.put("WAS", "Tomcat");
        map.put("Database", "MySQL");
        map.put("Framework", "Spring Boot");
        
        //View에 데이터 전달
        model.addAttribute("map", map);
        
        List<String> list = 
                new ArrayList<>();
        list.add("Back End Developer");
        list.add("Front End Developer");
        list.add("Operator");
        list.add("DBA");
        list.add("Data Analysis");
        list.add("Visualization Artist");
        list.add("Big Data");
        list.add("AI");
        list.add("Cloud - DevOps, MLOps, CI/CD");
        model.addAttribute("list", list);
       
        //뷰이름 리턴
        return "main";
    }
}


4)src/main 디렉토리 안에 webapp 디렉토리를 생성하고 그 안에 WEB-INF 디렉토리를 만들고 다시 그 안에 views 디렉토리를 생성

5)views 디렉토리에 main.jsp 파일을 만들고 작성
<%@ page language="java"
    contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ taglib prefix="c"
    uri="http://java.sun.com/jsp/jstl/core" %>
<!DOCTYPE html>
<html lang="ko">
<head>
    <title>Spring Boot 에서 JSP 출력</title>
    <meta charset="UTF-8" />
    <style>
        table, tr, td, th{
            border: 1px solid #444444;
        }
    </style>
<head>

<body>
    <div>
        <table>
            <tr>
                <th>언어</th>
                <th>통합 개발 환경</th>
                <th>프레임워크</th>
            </tr>
            <tr>
                <td>${map.Language}</td>
                <td>${map.IDE}</td>
                <td>${map.Framework}</td>
            </tr>
        </table>
    </div>

    <div>
        <table>
            <c:forEach items="${list}" var="job">
                <tr>
                    <td>${job}</td>
                </tr>
            </c:forEach>
        </table>
    </div>

6)애플리케이션을 실행하고 브라우저에서 localhost:8080 으로 접속

3.Thymeleaf
1)Thymeleaf
=>서버의 데이터를 출력하기 위한 템플릿 엔진 중의 하나
=>장점
데이터 출력하는 방법이 JSP 와 유사: ${데이터}
연산이나 포맷과 관련된 기능을 추가적인 작업없이 지원
확장자를 html로 설정해서 출력하는 것이 가능: 서버 사이드 랜더링을 하지 않고 출력하는 것 도 가능

=>도큐먼트 - https://www.thymeleaf.org

2)Spring Boot Devtools
=>개발을 편리하게 해주는 도구
=>Automatic Restart: classpath에 있는 파일이 변경될 때 마다 애플리케이션을 자동으로 재시작
=>Live Reload: 정적 자원 수정 시 새로 고침 없이 바로 적용
application.properties 파일에 추가 설정
spring.devtools.livereload.enabled=true

3)Thymeleaf 사용을 위해서 application.properties 파일 수정
spring.thymeleaf.cache=false
spring.devtools.livereload.enabled=true

4)Thymeleaf를 이용한 출력
=>PageController 클래스에 요청 처리 메서드를 추가
    //요청을 처리하는 메서드가 아무것도 리턴하지 않으면
    //view 이름은 요청 URL 이 됩니다.
    @GetMapping("/ex1")
    public void ex1(){}

=>templates 디렉토리에 ex1.html 파일을 만들고 작성
<!DOCTYPE html>
<html lang="en"
      xmlns:th="http://www.thymeleaf.org">
<head>
    <meta charset="UTF-8">
    <title>ex1</title>
</head>
<body>
  <h1 th:text="${'Hello Thymeleaf'}"></h1>
</body>
</html>

=>실행 한 후 브라우저에 localhost:8080/ex1 로 이동해서 확인

5)데이터 출력 및 제어문 사용
=>데이터 출력: [[${데이터이름}]]
=>반복문: th:each = "변수이름:${목록이름}"
=>분기문
th:if ~ unless
th:switch 와 th:case
삼항 연산 사용 가능

=>templates 디렉토리에 main.html 파일을 생성하고 작성
<!DOCTYPE html>
<html lang="en"
      xmlns:th="http://www.thymeleaf.org">
<head>
    <meta charset="UTF-8">
    <title>데이터 출력</title>
</head>
<body>
<div>
  <p>[[${map.Language}]]</p>

  <ul th:each="job : ${list}">
    <li>[[${job}]]</li>
  </ul>
</div>
</body>
</html>

=>서버를 실행하고 localhost:8080 을 확인

6)DTO 클래스를 생성해서 출력하기
=>domain.SampleVO 클래스를 생성하고 작성
@Data
@Builder
public class SampleVO {
    private Long sno;
    private String first;
    private String last;
    private LocalDateTime regTime;
}

=>PageController 클래스에 ex2 요청을 처리하는 메서드를 만들고 작성
@GetMapping("/ex2")
    public void ex2(Model model){
        List<SampleVO> list = 
                IntStream.rangeClosed(1, 20)
                        .asLongStream().mapToObj(i -> {
                    SampleVO vo = SampleVO.builder()
                            .sno(i)
                            .first("First.." + i)
                            .last("Last.." + i)
                            .regTime(LocalDateTime.now())
                            .build();
                    return vo;
                }).collect(Collectors.toList());
        model.addAttribute("list", list);
    }

=>templates 디렉토리에 ex2.html 파일을 만들고 데이터를 출력
<!DOCTYPE html>
<html lang="en"
      xmlns:th="http://www.thymeleaf.org">
<head>
    <meta charset="UTF-8">
    <title>데이터 출력</title>
</head>
<body>
    <ul>
        <li th:each="vo : ${list}">
            [[${vo}]]
        </li>
    </ul>
</body>
</html>

=>ex2.html 을 수정해서 인덱스를 출력
<!DOCTYPE html>
<html lang="en"
      xmlns:th="http://www.thymeleaf.org">
<head>
    <meta charset="UTF-8">
    <title>데이터 출력</title>
</head>
<body>
    <ul>
        <li th:each="vo, state : ${list}">
            <span th:if="${vo.sno % 3 == 0}">[[${vo.first}]]</span>
            <span th:unless="${vo.sno % 3 == 0}">[[${vo.last}]]</span>
        </li>
    </ul>
</body>
</html>

=>ex2.html 파일을 수정해서 링크 출력
<!DOCTYPE html>
<html lang="en"
      xmlns:th="http://www.thymeleaf.org">
<head>
    <meta charset="UTF-8">
    <title>데이터 출력</title>
</head>
<body>
    <ul>
        <li th:each="vo, state : ${list}">
            <a th:href="@{/exview}">[[${vo.sno}]]</a>
            <span th:if="${vo.sno % 3 == 0}">[[${vo.first}]]</span>
            <span th:unless="${vo.sno % 3 == 0}">[[${vo.last}]]</span>
        </li>
    </ul>
</body>
</html>

7)숫자 나 날짜 포맷 설정
=>숫자의 경우는 #numbers 를 이용해서 포맷을 설정
=>날짜의 경우는 #temporals를 이용해서 포맷을 설정하는데 의존성을 추가해야 합니다.

=>build.gradle 파일의 dependencies 에 날짜 포맷 관련 의존성을 추가 설정
implementation group:'org.thymeleaf.extras', name:'thymeleaf-extras-java8time'

=>PageController의 ex2 요청을 처리하는 메서드를 수정
@GetMapping({"/ex2", "/exformat"})
    public void ex2(Model model){
        List<SampleVO> list =
                IntStream.rangeClosed(1, 20)
                        .asLongStream().mapToObj(i -> {
                    SampleVO vo = SampleVO.builder()
                            .sno(i)
                            .first("First.." + i)
                            .last("Last.." + i)
                            .regTime(LocalDateTime.now())
                            .build();
                    return vo;
                }).collect(Collectors.toList());
        model.addAttribute("list", list);
    }

=>templates 디렉토리에 exformat.html 파일을 생성하고 출력
<!DOCTYPE html>
<html lang="en" xmlns:th="http://www.thymeleaf.org">
<head>
    <meta charset="UTF-8">
    <title>Title</title>
</head>
<body>
  <ul>
    <li th:each="vo : ${list}">
      [[${#numbers.formatInteger(vo.sno, 5)}]]
      ---
      [[${#temporals.format(vo.regTime, 'yyyy/MM/dd')}]]
    </li>
  </ul>
</body>
</html>








